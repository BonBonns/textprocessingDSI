// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// rcpp_filter
std::string rcpp_filter(Rcpp::StringVector words, std::string ifilename);
RcppExport SEXP _textprocessingDSI_rcpp_filter(SEXP wordsSEXP, SEXP ifilenameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::StringVector >::type words(wordsSEXP);
    Rcpp::traits::input_parameter< std::string >::type ifilename(ifilenameSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_filter(words, ifilename));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_join
std::vector<std::string> rcpp_join(std::string idir, std::string ofilename, int newline);
RcppExport SEXP _textprocessingDSI_rcpp_join(SEXP idirSEXP, SEXP ofilenameSEXP, SEXP newlineSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type idir(idirSEXP);
    Rcpp::traits::input_parameter< std::string >::type ofilename(ofilenameSEXP);
    Rcpp::traits::input_parameter< int >::type newline(newlineSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_join(idir, ofilename, newline));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_split
int rcpp_split(std::string fpath, std::string odir, std::string splitter, int count);
RcppExport SEXP _textprocessingDSI_rcpp_split(SEXP fpathSEXP, SEXP odirSEXP, SEXP splitterSEXP, SEXP countSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type fpath(fpathSEXP);
    Rcpp::traits::input_parameter< std::string >::type odir(odirSEXP);
    Rcpp::traits::input_parameter< std::string >::type splitter(splitterSEXP);
    Rcpp::traits::input_parameter< int >::type count(countSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_split(fpath, odir, splitter, count));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_summary
std::vector <std::string> rcpp_summary(std::string ipath, int delim);
RcppExport SEXP _textprocessingDSI_rcpp_summary(SEXP ipathSEXP, SEXP delimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type ipath(ipathSEXP);
    Rcpp::traits::input_parameter< int >::type delim(delimSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_summary(ipath, delim));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_textprocessingDSI_rcpp_filter", (DL_FUNC) &_textprocessingDSI_rcpp_filter, 2},
    {"_textprocessingDSI_rcpp_join", (DL_FUNC) &_textprocessingDSI_rcpp_join, 3},
    {"_textprocessingDSI_rcpp_split", (DL_FUNC) &_textprocessingDSI_rcpp_split, 4},
    {"_textprocessingDSI_rcpp_summary", (DL_FUNC) &_textprocessingDSI_rcpp_summary, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_textprocessingDSI(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
